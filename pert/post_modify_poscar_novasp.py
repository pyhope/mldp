#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jan 10 22:13:57 2021

without recal by vasp

working folder should contain p*.vasp files and log file with atom index generated by modify_poscar.py

@author: jiedeng
"""
import argparse
parser = argparse.ArgumentParser("Test model on poscars where atoms are manually palced and interatomic distances are controlled ")
#parser.add_argument("--file","-f",default='0.vasp',help="input file")
parser.add_argument("--temperature","-t",type=float,default=4000,help="temperature")
parser.add_argument("--model","-m",type=str,default='/u/project/ESS/lstixrud/jd848/pv_hf_copy/dp-train/mpmt/mm12/pv_Jan8_cpu.pb',help="model")
parser.add_argument("--index","-i",nargs="+", help="index of atom of interest, if not provided, read from log file")
args   = parser.parse_args()

import ase.io.vasp
import glob
import numpy as np
from ase.calculators.calculator import Calculator, all_changes
import deepmd.DeepPot as DeepPot

class DP_fparam(Calculator):
    """
    modify from DP class of deepmd
    the vanilla one does not support fparam 
    """
    name = "DP"
    implemented_properties = ["energy", "forces", "stress"]

    def __init__(self, model, label="DP",fparam=0, **kwargs):
        Calculator.__init__(self, label=label, **kwargs)
        self.dp = DeepPot(model)
        self.type_dict = dict(zip(self.dp.get_type_map(), range(self.dp.get_ntypes())))
        self.fparam= [fparam]

    def calculate(self, atoms=None, properties=["energy", "forces", "stress"], system_changes=all_changes):
        coord = atoms.get_positions().reshape([1, -1])
        cell = atoms.get_cell().reshape([1, -1])
        symbols = atoms.get_chemical_symbols()
        atype = [self.type_dict[k] for k in symbols]
        e, f, v = self.dp.eval(coord, cell, atype,fparam=self.fparam)
        self.results['energy'] = e[0]
        self.results['forces'] = f[0]
        self.results['stress'] = v[0]

if args.index:
    atom1, atom2 = args.index[0], args.index[1]
else:
    tmp = np.loadtxt('log').astype(int)
    atom1, atom2 = tmp[0], tmp[1]
       
kB = 8.617333e-5 # ev/k
fparam =  kB*args.temperature    
model      = args.model
calculator = DP_fparam(model=model,fparam=fparam)

structs   = glob.glob('p*.vasp')
force     = []
force_mag = []
energy    = []
dist      = []

for struct in structs:
    print('.... Analysis',struct)
    pv = ase.io.vasp.read_vasp(struct)
    pv.calc = calculator
    force_vec = pv.get_forces()[atom2]  # atom1 approach atom2
    force.append(force_vec)
    force_mag.append(np.sqrt(np.sum(force_vec**2)))
    energy.append(pv.get_potential_energy())
    dist.append(pv.get_all_distances()[atom2][atom1])

import matplotlib.pyplot as plt
fig,ax = plt.subplots(2,1,figsize=(4,6),sharex=True)
ax[0].plot(dist,force_mag,'o')
ax[1].plot(dist,energy,'o')
ax[0].set_ylabel('force (eV/A)')
ax[1].set_ylabel('energy (eV)')
ax[1].set_xlabel('interatomic distance (A)')
ax[0].grid()
ax[1].grid()
plt.minorticks_on()
plt.show()